"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-nk^v8%yimhn5fjw9vv$bcy_ad3c2h#s!8diy1eea*zkcuq!8)5"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "users.apps.UsersConfig",
    "departments.apps.DepartmentsConfig",
    "courses.apps.CoursesConfig",
    "grades.apps.GradesConfig",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",  # <--- 如果需要登出时使refresh token失效
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "student-grade-management-system",  # <--- 修改: 你的数据库名称
        "USER": "root",  # <--- 修改: 你的 MySQL 用户名
        "PASSWORD": "xiasiyuan18",  # <--- 修改: 你的 MySQL 密码
        "HOST": "localhost",  # <--- 修改: (通常是 'localhost' 或数据库服务器 IP)
        "PORT": "3306",  # <--- 修改: (MySQL 默认端口)
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",  # 推荐的 MySQL 设置
            "charset": "utf8mb4",  # 推荐使用 utf8mb4 以支持更广泛的字符集
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# <--- 添加: 指定自定义的用户模型 ---
# 假设你的 Student 模型类名为 Student，且位于 'users' 应用的 models.py 文件中
AUTH_USER_MODEL = "users.CustomUser"


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# LANGUAGE_CODE = "en-us" # 默认为英文
LANGUAGE_CODE = "zh-hans"  # <--- 可选修改: 设置为简体中文

# TIME_ZONE = "UTC" # 默认为UTC
TIME_ZONE = "Asia/Shanghai"  # <--- 可选修改: 设置为中国上海时区

USE_I18N = True

USE_TZ = True  # 推荐保持为 True，Django 会在内部处理时区转换


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.AllowAny",  # <--- 修改为 AllowAny
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

from datetime import timedelta  # 用于设置时间

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),  # 访问令牌的有效期，例如60分钟
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # 刷新令牌的有效期，例如1天
    "ROTATE_REFRESH_TOKENS": True,  # 建议开启: 每次使用refresh token获取新的access token时，也会返回一个新的refresh token
    "BLACKLIST_AFTER_ROTATION": True,  # 建议开启: 如果ROTATE_REFRESH_TOKENS为True，旧的refresh token会加入黑名单
    "UPDATE_LAST_LOGIN": True,  # 当用户通过token认证（通常是刷新token时）或登录时，更新其last_login字段
    "ALGORITHM": "HS256",  # 加密算法
    # "SIGNING_KEY": SECRET_KEY, # 默认使用 settings.SECRET_KEY，通常不需要修改
    # "VERIFYING_KEY": None, # 通常不需要修改
    "AUTH_HEADER_TYPES": (
        "Bearer",
    ),  # HTTP头部中Token的类型，例如: "Authorization: Bearer <access_token>"
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # 包含Token的HTTP头名称
    # 非常重要: 将这些字段与您的 CustomUser 模型对应起来
    "USER_ID_FIELD": "pk",  # CustomUser的主键字段名 (AbstractUser默认是 'id'，其值为pk)
    # 由于您在 CustomUser 中将 user_id 设为了主键，这里也可以是 "user_id"
    # "pk" 是一个通用的指向主键的方式
    "USER_ID_CLAIM": "user_id",  # JWT Payload 中代表用户ID的声明(claim)的名称
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",  # JWT Payload 中代表token类型的声明的名称
    "JTI_CLAIM": "jti",  # JWT ID, 用于唯一标识token，有助于防止重放攻击和实现黑名单
    # "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    # "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    # "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = 'users:login' 